name: Build variant

on:
  workflow_call:
    inputs:
      PROJECT_NAME:
        type: string
      VARIANT:
        type: string
    outputs:
      ARTIFACT_NAME:
        value: ${{ jobs.build.outputs.ARTIFACT_NAME }}
      PRODUCT_NAME:
        value: ${{ jobs.build.outputs.PRODUCT_NAME }}
      PRODUCT_VERSION:
        value: ${{ jobs.build.outputs.PRODUCT_VERSION }}
      BINARY_NAME:
        value: ${{ jobs.build.outputs.BINARY_NAME }}

env:
  PROJECT_NAME: ${{inputs.PROJECT_NAME}}
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-latest
    env:
      BUILD_DIR: ${{github.workspace}}/build${{inputs.VARIANT}}
      CMAKE_PRESET: githubci-${{inputs.VARIANT}}
    outputs:
      ARTIFACT_NAME: ${{ steps.export.outputs.ARTIFACT_NAME }}
      BINARY_NAME: ${{ steps.export.outputs.BINARY_NAME }}
      PRODUCT_NAME: ${{ steps.export.outputs.PRODUCT_NAME }}
      PRODUCT_VERSION: ${{ steps.export.outputs.PRODUCT_VERSION }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive 
    
    - name: Configure CMake
      run: cmake --preset ${{env.CMAKE_PRESET}}

    - name: Build
      run: cmake --build ${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}}
    
    - id: export
      shell: pwsh
      run: |
        $PRODUCT_NAME = cmake -L -N ${{env.BUILD_DIR}} | grep NAME | %{$_ -replace "NAME:STRING=",""}
        $PRODUCT_VERSION = cmake -L -N ${{env.BUILD_DIR}} | grep ^VERSION | %{$_ -replace "VERSION:STRING=",""}
        $BINARY_NAME = "${PRODUCT_NAME}.dll"
        $BINARY_PATH = "${{env.BUILD_DIR}}/${{inputs.PROJECT_NAME}}/${{env.BUILD_TYPE}}/${BINARY_NAME}"
        $MARKETING_SUFFIX = "${{inputs.VARIANT}}".ToUpper()
        $ARTIFACT_NAME = "${{inputs.PROJECT_NAME}} $MARKETING_SUFFIX"

        echo "::set-output name=PRODUCT_NAME::$PRODUCT_NAME"
        echo "::set-output name=PRODUCT_VERSION::$PRODUCT_VERSION"
        echo "::set-output name=ARTIFACT_NAME::$ARTIFACT_NAME"
        echo "::set-output name=BINARY_PATH::$BINARY_PATH"
        echo "::set-output name=BINARY_NAME::$BINARY_NAME"
        echo "Built $BINARY_NAME âœ…"
        echo "Location: $BINARY_PATH"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: ${{ steps.export.outputs.ARTIFACT_NAME }}
        if-no-files-found: error
        path: ${{ steps.export.outputs.BINARY_PATH }}
      
