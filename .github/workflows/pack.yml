name: Pack

on:
  workflow_call:
    inputs:
      CMAKE_PROJECT_DIR:
        type: string
        description: "Path to a directory relative to CMake's BINARY_DIR (e.g. build/CMAKE_PROJECT_DIR/Release/mod.dll)"
        required: false
        default: ''
      CMAKE_BINARY_NAME:
        type: string
        description: "Name of the of the built binary. When CMAKE_BINARY_NAME is set it takes precedence over CMAKE_BINARY_NAME_VAR."
        required: false
        default: ''
      CMAKE_BINARY_NAME_VAR:
        type: string
        description: "Name of the CMake variable that contains name of the built binary. Note that this variable must be CACHE variable."
        required: false
        default: "NAME"
      CMAKE_BINARY_VERSION:
        type: string
        description: "Version of the of the built binary. When CMAKE_BINARY_VERSION is set it takes precedence over CMAKE_SE_PRESET."
        required: false
        default: ''
      CMAKE_BINARY_VERSION_VAR:
        type: string
        description: "Name of the CMake variable that contains version of the built binary. Note that this variable must be CACHE variable."
        required: false
        default: "VERSION"
      CMAKE_SE_CONFIG_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to use to generate the project files for SE variant."
        required: false
        default: 'vs2022-windows-vcpkg-se'
      CMAKE_SE_BUILD_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to build the project for SE variant."
        required: false
        default: ''
      CMAKE_SE_BINARY_DIR:
        type: string
        required: false
        default: "build"
      CMAKE_AE_CONFIG_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to use to generate the project files for AE variant."
        required: false
        default: 'vs2022-windows-vcpkg-ae'
      CMAKE_AE_BUILD_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to build the project for AE variant."
        required: false
        default: ''
      CMAKE_AE_BINARY_DIR:
        type: string
        required: false
        default: "buildae"
      CMAKE_VR_CONFIG_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to use to generate the project files for VR variant."
        required: false
        default: 'vs2022-windows-vcpkg-vr'
      CMAKE_VR_BUILD_PRESET:
        type: string
        description: "Name of the CMakePresets.json's configuration to build the project for VR variant."
        required: false
        default: ''
      CMAKE_VR_BINARY_DIR:
        type: string
        required: false
        default: "buildvr"
      AE_353_BRANCH:
        type: string
        description: "Name of the branch in current repository that is compatible with 1.6.353 version. By default 353 build is disabled. In order to enable it this input must be set. If 353 is build from main branch you can specify it here."
        required: false
        default: ''
      AE_353_COMMON_LIB_BRANCH:
        type: string
        description: "Name of the branch in powerof3/CommonLibSSE repo to be used when building AE 1.6.353 variant. This will forcefully update CommonLibSSE submodule to use latest commit of that branch instead."
        required: false
        default: 'dev-1.6.353'
      FOMOD_INCLUDE_PDB:
        type: boolean
        description: "Flag indicating whether PDB files should be packed into FOMOD along with DLLs."
        required: false
        default: false
      FOMOD_MOD_NAME:
        type: string
        description: "Name of the mod that will be displayed in FOMOD Installer."
        required: true
      FOMOD_MOD_AUTHOR:
        type: string
        description: "Author of the mod that will be displayed in FOMOD Installer's metadata."
        required: true
      FOMOD_MOD_NEXUS_ID:
        type: string
        required: false
        description: "Id of the mod page on Nexus that will be displayed in FOMOD Installer's metadata."
        default: ''
      FOMOD_REQUIRED_INSTALLATION_DIR:
        type: string
        description: "Path to the directory that contains game files that should always be installed. This path is relative to repository's root."
        required: false
        default: ''
      FOMOD_REQUIRED_SRC_PATH:
        type: string
        description: "Path to the folder in FOMOD installer containing files that should always be installed."
        required: false
        default: 'Required'
      FOMOD_REQUIRED_DST_PATH:
        type: string
        description: "Path to the installation directory where FOMOD will install required files. This path is relative to FOMOD Installer's root."
        required: false
        default: 'Data'
      FOMOD_DST_PATH:
        type: string
        description: "Path to the installation directory where FOMOD will install files. This is typically Data/SKSE/Plugins."
        required: false
        default: 'Data/SKSE/Plugins'
      FOMOD_TITLE:
        type: string
        description: "Title of the installation page in FOMOD Installer (displayed under the mod's name)."
        required: false
        default: 'Main'
      FOMOD_GROUP_NAME:
        type: string
        description: "Title of the group with installation options."
        required: false
        default: 'DLL'
      FOMOD_DEFAULT_IMAGE:
        type: string
        description: "Path to the image file to be used as a default cover for all installation options. Ignored for variants that define their own image."
        required: false
        default: ''
      FOMOD_SE_PATH:
        type: string
        description: "Path to SE binaries relative to FOMOD Installer's root."
        required: false
        default: 'SE/SKSE/Plugins'
      FOMOD_SE_NAME:
        type: string
        description: "Name of the SE installation option."
        required: false
        default: 'SSE v1.5.97 ("Special Edition")'
      FOMOD_SE_DESCR:
        type: string
        description: "Description of the SE installation option."
        required: false
        default: 'Select this if you are using Skyrim Special Edition v1.5.97.'
      FOMOD_SE_IMAGE:
        type: string
        description: "Path to the image file to be used as a cover for SE installation option."
        required: false
        default: ''
      FOMOD_SE_MIN_GAME_VERSION:
        type: string
        description: "Minimum version of the game that is recognized as SE variant."
        required: false
        default: '1.5.97.0'
      FOMOD_AE353_PATH:
        type: string
        description: "Path to AE 1.6.353 binaries relative to FOMOD Installer's root."
        required: false
        default: 'AE353/SKSE/Plugins'
      FOMOD_AE353_NAME:
        type: string
        description: "Name of the AE .353 installation option."
        required: false
        default: 'SSE v1.6.353 ("Anniversary Edition")'
      FOMOD_AE353_DESCR:
        type: string
        description: "Description of the AE .353 installation option."
        required: false
        default: 'Select this if you are using Skyrim Anniversary Edition v1.6.353 or lower.'
      FOMOD_AE353_IMAGE:
        type: string
        description: "Path to the image file to be used as a cover for AE .353 installation option."
        required: false
        default: ''
      FOMOD_AE353_MIN_GAME_VERSION:
        type: string
        description: "Minimum version of the game that is recognized as AE 1.6.353 variant."
        required: false
        default: '1.6.317.0'
      FOMOD_AE_PATH:
        type: string
        description: "Path to AE binaries relative to FOMOD Installer's root."
        required: false
        default: 'AE/SKSE/Plugins'
      FOMOD_AE_NAME:
        type: string
        description: "Name of the AE installation option."
        required: false
        default: 'SSE v1.6.629+ ("Anniversary Edition")'
      FOMOD_AE_DESCR:
        type: string
        description: "Description of the AE installation option."
        required: false
        default: 'Select this if you are using Skyrim Anniversary Edition v1.6.629 or higher (latest update).'
      FOMOD_AE_IMAGE:
        type: string
        description: "Path to the image file to be used as a cover for AE installation option."
        required: false
        default: ''
      FOMOD_AE_MIN_GAME_VERSION:
        type: string
        description: "Minimum version of the game that is recognized as AE variant."
        required: false
        default: '1.6.629.0'
      FOMOD_VR_PATH:
        type: string
        description: "Path to VR binaries relative to FOMOD Installer's root."
        required: false
        default: 'VR/SKSE/Plugins'
      FOMOD_VR_NAME:
        type: string
        description: "Name of the VR installation option."
        required: false
        default: 'VR v1.4.15 ("Skyrim VR")'
      FOMOD_VR_DESCR:
        type: string
        description: "Description of the VR installation option."
        required: false
        default: 'Select this if you are using Skyrim VR v1.4.15.'
      FOMOD_VR_IMAGE:
        type: string
        description: "Path to the image file to be used as a cover for VR installation option."
        required: false
        default: ''
      FOMOD_VR_MIN_GAME_VERSION:
        type: string
        description: "Minimum version of the game that is recognized as VR variant."
        required: false
        default: '1.4.15.0'
      PUBLISH_ARCHIVE_TYPE:
        type: string
        description: "Preferred type of archive to be used. Supports either zip or 7z"
        required: false
        default: 'zip'
      PUBLISH_MOD_DESCRIPTION_FILE:
        type: string
        description: "Path to a text file containing description of the mod's file. Path is relative to repository's root."
        required: false
        default: ''
      PUBLISH_MOD_CHANGELOG_FILE:
        type: string
        description: "Path to a text file containing changelog that will be associated with the version being published. Path is relative to repository's root."
        required: false
        default: ''
    outputs:
      PRODUCT_VERSION:
        value: ${{ jobs.fomod.outputs.MOD_VERSION }}
      FOMOD_INSTALLER:
        value: ${{ jobs.fomod.outputs.INSTALLER_NAME }}
      SE_ARTIFACT_NAME:
        value: ${{ jobs.se.outputs.ARTIFACT_NAME }}
      AE_ARTIFACT_NAME:
        value: ${{ jobs.ae.outputs.ARTIFACT_NAME }}
      AE353_ARTIFACT_NAME:
        value: ${{ jobs.ae353.outputs.ARTIFACT_NAME }}
      VR_ARTIFACT_NAME:
        value: ${{ jobs.vr.outputs.ARTIFACT_NAME }}
      

jobs:
  prepare:
    runs-on: windows-latest
    outputs:
      HAS_SE: ${{ steps.variants.outputs.HAS_SE }}
      HAS_AE: ${{ steps.variants.outputs.HAS_AE }}
      HAS_VR: ${{ steps.variants.outputs.HAS_VR }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Check presets
        id: variants
        shell: pwsh
        run: |
          $LIST = cmake --list-presets
          $HAS_SE = ![string]::IsNullOrEmpty("${{inputs.CMAKE_SE_CONFIG_PRESET}}") -and ($LIST | Select-String -Pattern "${{inputs.CMAKE_SE_CONFIG_PRESET}}" -Quiet)
          $HAS_AE = ![string]::IsNullOrEmpty("${{inputs.CMAKE_AE_CONFIG_PRESET}}") -and ($LIST | Select-String -Pattern "${{inputs.CMAKE_AE_CONFIG_PRESET}}" -Quiet)
          $HAS_VR = ![string]::IsNullOrEmpty("${{inputs.CMAKE_VR_CONFIG_PRESET}}") -and ($LIST | Select-String -Pattern "${{inputs.CMAKE_VR_CONFIG_PRESET}}" -Quiet)
          if ($HAS_SE) {
            echo "SE Variant: ✅"
            echo "::set-output name=HAS_SE::true"
          } else {
            echo "SE Variant: ⬛"
            echo "::set-output name=HAS_SE::false"
          }
          if ($HAS_AE) {
            echo "AE Variant: ✅"
            echo "::set-output name=HAS_AE::true"
          } else {
            echo "AE Variant: ⬛"
            echo "::set-output name=HAS_AE::false"
          }
          if ($HAS_VR) {
            echo "VR Variant: ✅"
            echo "::set-output name=HAS_VR::true"
          } else {
            echo "VR Variant: ⬛"
            echo "::set-output name=HAS_VR::false"
          }

          $ARCHIVE_TYPE = '${{ inputs.PUBLISH_ARCHIVE_TYPE }}'

          If (($ARCHIVE_TYPE -ne 'zip') -and ($ARCHIVE_TYPE -ne '7z')) {
            echo "PUBLISH_ARCHIVE_TYPE must be either 'zip' or '7z', but not '$ARCHIVE_TYPE'"
            exit 1
          }

  se:
    needs: prepare
    if: needs.prepare.outputs.HAS_SE == 'true'
    uses: ./.github/workflows/build-variant.yml
    with:
      CMAKE_PROJECT_DIR: ${{ inputs.CMAKE_PROJECT_DIR }}
      CMAKE_CONFIG_PRESET: ${{ inputs.CMAKE_SE_CONFIG_PRESET }}
      CMAKE_BUILD_PRESET: ${{ inputs.CMAKE_SE_BUILD_PRESET }}
      BINARY_DIR: ${{ inputs.CMAKE_SE_BINARY_DIR }}
      BINARY_NAME: ${{ inputs.CMAKE_BINARY_NAME }}
      BINARY_NAME_VAR: ${{ inputs.CMAKE_BINARY_NAME_VAR }}
      BINARY_VERSION: ${{ inputs.CMAKE_BINARY_VERSION }}
      BINARY_VERSION_VAR: ${{ inputs.CMAKE_BINARY_VERSION_VAR }}
      VARIANT: "se"
    
  ae:
    needs: prepare
    if: needs.prepare.outputs.HAS_AE == 'true'
    uses: ./.github/workflows/build-variant.yml
    with:
      CMAKE_PROJECT_DIR: ${{ inputs.CMAKE_PROJECT_DIR }}
      CMAKE_CONFIG_PRESET: ${{ inputs.CMAKE_AE_CONFIG_PRESET }}
      CMAKE_BUILD_PRESET: ${{ inputs.CMAKE_AE_BUILD_PRESET }}
      BINARY_DIR: ${{ inputs.CMAKE_AE_BINARY_DIR }}
      BINARY_NAME: ${{ inputs.CMAKE_BINARY_NAME }}
      BINARY_NAME_VAR: ${{ inputs.CMAKE_BINARY_NAME_VAR }}
      BINARY_VERSION: ${{ inputs.CMAKE_BINARY_VERSION }}
      BINARY_VERSION_VAR: ${{ inputs.CMAKE_BINARY_VERSION_VAR }}
      VARIANT: "ae"
  
  ae353:
    needs: prepare
    if: (needs.prepare.outputs.HAS_AE == 'true') && (inputs.AE_353_BRANCH != '')
    uses: ./.github/workflows/build-variant.yml
    with:
      GIT_BRANCH: ${{inputs.AE_353_BRANCH}}
      GIT_COMMON_LIB_BRANCH: ${{inputs.AE_353_COMMON_LIB_BRANCH}}
      CMAKE_PROJECT_DIR: ${{ inputs.CMAKE_PROJECT_DIR }}
      CMAKE_CONFIG_PRESET: ${{ inputs.CMAKE_AE_CONFIG_PRESET }}
      CMAKE_BUILD_PRESET: ${{ inputs.CMAKE_AE_BUILD_PRESET }}
      BINARY_DIR: ${{ inputs.CMAKE_AE_BINARY_DIR }}
      BINARY_NAME: ${{ inputs.CMAKE_BINARY_NAME }}
      BINARY_NAME_VAR: ${{ inputs.CMAKE_BINARY_NAME_VAR }}
      BINARY_VERSION: ${{ inputs.CMAKE_BINARY_VERSION }}
      BINARY_VERSION_VAR: ${{ inputs.CMAKE_BINARY_VERSION_VAR }}
      VARIANT: "ae353"

  vr:
    needs: prepare
    if: needs.prepare.outputs.HAS_VR == 'true'
    uses: ./.github/workflows/build-variant.yml
    with:
      CMAKE_PROJECT_DIR: ${{ inputs.CMAKE_PROJECT_DIR }}
      CMAKE_CONFIG_PRESET: ${{ inputs.CMAKE_VR_CONFIG_PRESET }}
      CMAKE_BUILD_PRESET: ${{ inputs.CMAKE_VR_BUILD_PRESET }}
      BINARY_DIR: ${{ inputs.CMAKE_VR_BINARY_DIR }}
      BINARY_NAME: ${{ inputs.CMAKE_BINARY_NAME }}
      BINARY_NAME_VAR: ${{ inputs.CMAKE_BINARY_NAME_VAR }}
      BINARY_VERSION: ${{ inputs.CMAKE_BINARY_VERSION }}
      BINARY_VERSION_VAR: ${{ inputs.CMAKE_BINARY_VERSION_VAR }}
      VARIANT: "vr"

  fomod:
    needs: [prepare, se, ae, vr, ae353]
    if: always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure'))
    uses: ./.github/workflows/make-fomod.yml
    with:
      MOD_NAME: ${{ inputs.FOMOD_MOD_NAME }}
      MOD_AUTHOR: ${{ inputs.FOMOD_MOD_AUTHOR }}
      MOD_NEXUS_ID: ${{ inputs.FOMOD_MOD_NEXUS_ID }}
      REQUIRED_INSTALLATION_DIR: ${{ inputs.FOMOD_REQUIRED_INSTALLATION_DIR }}
      REQUIRED_SRC_PATH: ${{ inputs.FOMOD_REQUIRED_SRC_PATH }}
      REQUIRED_DST_PATH: ${{ inputs.FOMOD_REQUIRED_DST_PATH }}
      DST_PATH: ${{ inputs.FOMOD_DST_PATH }}
      INCLUDE_PDB: ${{ inputs.FOMOD_INCLUDE_PDB }}
      TITLE: ${{ inputs.FOMOD_TITLE }}
      GROUP_NAME: ${{ inputs.FOMOD_GROUP_NAME }}
      DEFAULT_IMAGE: ${{ inputs.FOMOD_DEFAULT_IMAGE }}
      SE_PATH: ${{ inputs.FOMOD_SE_PATH }}
      SE_NAME: ${{ inputs.FOMOD_SE_NAME }}
      SE_DESCR: ${{ inputs.FOMOD_SE_DESCR }}
      SE_IMAGE: ${{ inputs.FOMOD_SE_IMAGE }}
      SE_MIN_GAME_VERSION: ${{ inputs.FOMOD_SE_MIN_GAME_VERSION }}
      SE_VERSION: ${{ needs.se.outputs.PRODUCT_VERSION }}
      SE_ARTIFACT: ${{ needs.se.outputs.ARTIFACT_NAME }}
      AE_PATH: ${{ inputs.FOMOD_AE_PATH }}
      AE_NAME: ${{ inputs.FOMOD_AE_NAME }}
      AE_DESCR: ${{ inputs.FOMOD_AE_DESCR }}
      AE_IMAGE: ${{ inputs.FOMOD_AE_IMAGE }}
      AE_MIN_GAME_VERSION: ${{ inputs.FOMOD_AE_MIN_GAME_VERSION }}
      AE_VERSION: ${{ needs.ae.outputs.PRODUCT_VERSION }}
      AE_ARTIFACT: ${{ needs.ae.outputs.ARTIFACT_NAME }}
      AE353_PATH: ${{ inputs.FOMOD_AE353_PATH }}
      AE353_NAME: ${{ inputs.FOMOD_AE353_NAME }}
      AE353_DESCR: ${{ inputs.FOMOD_AE353_DESCR }}
      AE353_IMAGE: ${{ inputs.FOMOD_AE353_IMAGE }}
      AE353_MIN_GAME_VERSION: ${{ inputs.FOMOD_AE353_MIN_GAME_VERSION }}
      AE353_VERSION: ${{ needs.ae353.outputs.PRODUCT_VERSION }}
      AE353_ARTIFACT: ${{ needs.ae353.outputs.ARTIFACT_NAME }}
      VR_PATH: ${{ inputs.FOMOD_VR_PATH }}
      VR_NAME: ${{ inputs.FOMOD_VR_NAME }}
      VR_DESCR: ${{ inputs.FOMOD_VR_DESCR }}
      VR_IMAGE: ${{ inputs.FOMOD_VR_IMAGE }}
      VR_MIN_GAME_VERSION: ${{ inputs.FOMOD_VR_MIN_GAME_VERSION }}
      VR_VERSION: ${{ needs.vr.outputs.PRODUCT_VERSION }}
      VR_ARTIFACT: ${{ needs.vr.outputs.ARTIFACT_NAME }}

  publish:
    needs: fomod
    if: always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && github.ref_type == 'tag'
    uses: ./.github/workflows/publish.yml
    with:
      INSTALLER_NAME: ${{ needs.fomod.outputs.INSTALLER_NAME }}
      ARCHIVE_TYPE: ${{ inputs.PUBLISH_ARCHIVE_TYPE }}
      MOD_NAME: ${{ inputs.FOMOD_MOD_NAME }}
      MOD_VERSION: ${{ needs.fomod.outputs.MOD_VERSION }}
      MOD_DESCRIPTION: ${{ inputs.PUBLISH_MOD_DESCRIPTION_FILE }}
      MOD_CHANGELOG: ${{ inputs.PUBLISH_MOD_CHANGELOG_FILE }}
