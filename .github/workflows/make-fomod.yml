name: Make FOMOD

on:
  workflow_call:
    inputs:
      MOD_NAME:
        type: string
      MOD_AUTHOR:
        type: string
      MOD_NEXUS_ID:
        type: string
      REQUIRED_INSTALLATION_DIR:
        type: string
      REQUIRED_SRC_PATH:
        type: string
      REQUIRED_DST_PATH:
        type: string
      DST_PATH:
        type: string
      INCLUDE_PDB:
        type: boolean
      TITLE:
        type: string
      GROUP_NAME:
        type: string
      DEFAULT_IMAGE:
        type: string
      SE_PATH:
        type: string
      SE_NAME:
        type: string
      SE_DESCR:
        type: string
      SE_IMAGE:
        type: string
      SE_MIN_GAME_VERSION:
        type: string
      SE_VERSION:
        type: string
      SE_ARTIFACT:
        type: string
      AE353_PATH:
        type: string
      AE353_NAME:
        type: string
      AE353_DESCR:
        type: string
      AE353_IMAGE:
        type: string
      AE353_MIN_GAME_VERSION:
        type: string
      AE353_VERSION:
        type: string
      AE353_ARTIFACT:
        type: string
      AE_PATH:
        type: string
      AE_NAME:
        type: string
      AE_DESCR:
        type: string
      AE_IMAGE:
        type: string
      AE_MIN_GAME_VERSION:
        type: string
      AE_VERSION:
        type: string
      AE_ARTIFACT:
        type: string
      VR_PATH:
        type: string
      VR_NAME:
        type: string
      VR_DESCR:
        type: string
      VR_IMAGE:
        type: string
      VR_MIN_GAME_VERSION:
        type: string
      VR_VERSION:
        type: string
      VR_ARTIFACT:
        type: string
    outputs:
      INSTALLER_NAME:
        value: ${{ jobs.make.outputs.INSTALLER_NAME }}
      MOD_VERSION:
        value: ${{ jobs.make.outputs.MOD_VERSION }}

env:
  ARTIFACTS_DIR: "artifacts"
  INSTALLER_DIR: "installer"

jobs:
  make:
    runs-on: windows-latest
    outputs:
      INSTALLER_NAME: ${{ steps.fomod.outputs.INSTALLER_NAME }}
      MOD_VERSION: ${{ steps.fomod.outputs.MOD_VERSION }}
    steps:

    # Checkout to get required installation.
    - uses: actions/checkout@v3

    - name: Check Required Installation
      id: req-install
      shell: pwsh
      run: |
        $REQUIRED_DIR = "${{ inputs.REQUIRED_INSTALLATION_DIR }}"
        $HAS_REQUIRED_INSTALL = ![string]::IsNullOrEmpty($REQUIRED_DIR) -and (Test-Path "$REQUIRED_INSTALLATION_DIR/*")
        $HAS_VALID_SRC = ![string]::IsNullOrEmpty("${{ inputs.REQUIRED_SRC_PATH }}")
        If ($HAS_REQUIRED_INSTALL -and $HAS_VALID_SRC) {
            echo "Required installation will be packed ✅"
            echo "HAS_REQUIRED_INSTALL=true" >> $Env:GITHUB_OUTPUT
        } else {
            echo "Required installation is not provided ⬛"
            echo "HAS_REQUIRED_INSTALL=false" >> $Env:GITHUB_OUTPUT
        }

    - name: Create FOMOD 
      id: fomod
      shell: pwsh
      run: |

        # Get the first available version (defaults to 1.0.0 if no versions found)
        $versions = "${{inputs.SE_VERSION}}","${{inputs.AE_VERSION}}","${{inputs.AE353_VERSION}}","${{inputs.VR_VERSION}}","1.0.0"
        $MOD_VERSION = $versions | Where{$_ -ne ""} | Select-Object -first 1

        $MOD_NAME = "${{inputs.MOD_NAME}}"
        $MOD_AUTHOR = "${{inputs.MOD_AUTHOR}}"
        $MOD_NEXUS_ID = "${{inputs.MOD_NEXUS_ID}}"
        $DEFAULT_IMAGE = "${{inputs.DEFAULT_IMAGE}}"

        $HAS_REQUIRED_INSTALL = "${{steps.req-install.outputs.HAS_REQUIRED_INSTALL}}" -eq "true"
        $REQUIRED_SRC_PATH = "${{inputs.REQUIRED_SRC_PATH}}"
        $REQUIRED_DST_PATH = "${{inputs.REQUIRED_DST_PATH}}"
        $DST_PATH = "${{inputs.DST_PATH}}"
        $TITLE = "${{inputs.TITLE}}"
        $GROUP_NAME = "${{inputs.GROUP_NAME}}"
               
        # "Private" vars. You shouldn't change it
        $INSTALLER_DIR = "$PWD/${{env.INSTALLER_DIR}}"
        $FOMOD_DIR = "$INSTALLER_DIR/fomod"
        $IMAGES_DIR = "$FOMOD_DIR/images"
        $IMAGES_PATH = "fomod/images"
        $MOD_CONFIG_PATH = "$FOMOD_DIR/ModuleConfig.xml"
        $MOD_INFO_PATH = "$FOMOD_DIR/info.xml"
        $MOD_NEXUS_URL = "https://www.nexusmods.com/skyrimspecialedition/mods/$MOD_NEXUS_ID"

        # Creates a usable objects that hold information about variants
        function Create-Variant-Info {
          [CmdletBinding()]
          param (
            [string] $Name,
            [string] $Path,
            [string] $Description,
            [string] $Image,
            [string] $GameVersion,
            [string] $Artifact
          )

          $ImageSrc = If (![string]::IsNullOrEmpty($Image)) { $Image } else { $DEFAULT_IMAGE }
          # ImageDst will be empty if there is no image detected for given variant
          $ImageDst = If (![string]::IsNullOrEmpty($ImageSrc) -and (Test-Path "$ImageSrc")) { "$IMAGES_PATH/$(Split-Path $ImageSrc -Leaf)" } else { "" }
          $IsDetected = ![string]::IsNullOrEmpty($Artifact)
          return [PSCustomObject]@{
            Name = $Name
            Path = $Path
            Description = $Description
            ImageSrc = $ImageSrc
            ImageDst = $ImageDst
            GameVersion = $GameVersion
            Artifact = $Artifact
            IsDetected = $IsDetected
          }
        }

        $Variants = @(
          Create-Variant-Info '${{inputs.AE_NAME}}' '${{inputs.AE_PATH}}' '${{inputs.AE_DESCR}}' '${{inputs.AE_IMAGE}}' '${{inputs.AE_MIN_GAME_VERSION}}' '${{inputs.AE_ARTIFACT}}'
          Create-Variant-Info '${{inputs.AE353_NAME}}' '${{inputs.AE353_PATH}}' '${{inputs.AE353_DESCR}}' '${{inputs.AE353_IMAGE}}' '${{inputs.AE353_MIN_GAME_VERSION}}' '${{inputs.AE353_ARTIFACT}}'
          Create-Variant-Info '${{inputs.SE_NAME}}' '${{inputs.SE_PATH}}' '${{inputs.SE_DESCR}}' '${{inputs.SE_IMAGE}}' '${{inputs.SE_MIN_GAME_VERSION}}' '${{inputs.SE_ARTIFACT}}'
          Create-Variant-Info '${{inputs.VR_NAME}}' '${{inputs.VR_PATH}}' '${{inputs.VR_DESCR}}' '${{inputs.VR_IMAGE}}' '${{inputs.VR_MIN_GAME_VERSION}}' '${{inputs.VR_ARTIFACT}}'
        )

        # Writes installation option with given title, desciption and path. Providing auto-select behavior for specified versions.
        function Write-Plugin {
            [CmdletBinding()]
            param (
                [System.XML.XmlWriter] $xmlWriter,
                [string] $Title,
                [string] $Descr,
                [string] $Image,
                [string] $SrcPath,
                [string] $GameVersion
            )
            
            process {
                $xmlWriter.WriteStartElement("plugin")
                $xmlWriter.WriteAttributeString("name", $Title)
                If (![string]::IsNullOrEmpty($Descr)) {
                    $xmlWriter.WriteElementString("description", $Descr)
                }
                If (![string]::IsNullOrEmpty($Image)) {
                  $xmlWriter.WriteStartElement("image")
                      $xmlWriter.WriteAttributeString("path", "$Image") 
                  $xmlWriter.WriteEndElement()
                }
                $xmlWriter.WriteStartElement("files")
                    $xmlWriter.WriteStartElement("folder")
                        $xmlWriter.WriteAttributeString("source", $SrcPath)
                        $xmlWriter.WriteAttributeString("destination", $DST_PATH)
                        $xmlWriter.WriteAttributeString("priority", "0")
                    $xmlWriter.WriteEndElement()
                $xmlWriter.WriteEndElement()
                $xmlWriter.WriteStartElement("typeDescriptor")
                    $xmlWriter.WriteStartElement("dependencyType")
                        $xmlWriter.WriteStartElement("defaultType")
                            $xmlWriter.WriteAttributeString("name", "Optional")
                        $xmlWriter.WriteEndElement()
                        $xmlWriter.WriteStartElement("patterns")
                        # Write pattern for each version
                        Foreach ($Variant in $Variants) {
                            If ($Variant.IsDetected) {
                                If ($Variant.GameVersion -eq $GameVersion) {
                                    $DepType = "Recommended"
                                } else {
                                    $DepType = "Optional"
                                }
                                $xmlWriter.WriteStartElement("pattern")
                                    $xmlWriter.WriteStartElement("dependencies")
                                        $xmlWriter.WriteStartElement("gameDependency")
                                            $xmlWriter.WriteAttributeString("version", $Variant.GameVersion)
                                        $xmlWriter.WriteEndElement()
                                    $xmlWriter.WriteEndElement()
                                    $xmlWriter.WriteStartElement("type")
                                        $xmlWriter.WriteAttributeString("name", $DepType)
                                    $xmlWriter.WriteEndElement()
                                $xmlWriter.WriteEndElement()
                            }
                        }
                        $xmlWriter.WriteEndElement()
                    $xmlWriter.WriteEndElement()
                $xmlWriter.WriteEndElement()
            $xmlWriter.WriteEndElement()
            }
        }

        function Write-Config {
          process {
            $xmlSettings = New-Object System.Xml.XmlWriterSettings
            $xmlSettings.Indent = $true
            $xmlSettings.IndentChars = "    "
            
            $xmlWriter = [System.XML.XmlWriter]::Create($MOD_CONFIG_PATH, $xmlSettings)
            $xmlWriter.WriteStartDocument()
            $xmlWriter.WriteStartElement("config")
                $xmlWriter.WriteAttributeString("xmlns", "xsi", $null, "http://www.w3.org/2001/XMLSchema-instance")
                $xmlWriter.WriteAttributeString("noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance", "http://qconsulting.ca/fo3/ModConfig5.0.xsd")
                $xmlWriter.WriteElementString("moduleName", $MOD_NAME)
                If ($HAS_REQUIRED_INSTALL) {
                    $xmlWriter.WriteStartElement("requiredInstallFiles")
                        $xmlWriter.WriteStartElement("folder")
                            $xmlWriter.WriteAttributeString("source", $REQUIRED_SRC_PATH)
                            $xmlWriter.WriteAttributeString("destination", $REQUIRED_DST_PATH)
                        $xmlWriter.WriteEndElement()
                    $xmlWriter.WriteEndElement()
                }
                $xmlWriter.WriteStartElement("installSteps")
                    $xmlWriter.WriteAttributeString("order", "Explicit")
                    $xmlWriter.WriteStartElement("installStep")
                        $xmlWriter.WriteAttributeString("name", $TITLE)
                        $xmlWriter.WriteStartElement("optionalFileGroups")
                            $xmlWriter.WriteAttributeString("order", "Explicit")
                            $xmlWriter.WriteStartElement("group")
                                $xmlWriter.WriteAttributeString("name", $GROUP_NAME)
                                $xmlWriter.WriteAttributeString("type", "SelectExactlyOne")
                                $xmlWriter.WriteStartElement("plugins")
                                    $xmlWriter.WriteAttributeString("order", "Explicit")
                                    Foreach ($Variant in $Variants) {
                                        If ($Variant.IsDetected) {
                                            Write-Plugin -xmlWriter $xmlWriter -Title $Variant.Name -Descr $Variant.Description -Image $Variant.ImageDst -SrcPath $Variant.Path -GameVersion $Variant.GameVersion
                                        }
                                    }
                                $xmlWriter.WriteEndElement()
                            $xmlWriter.WriteEndElement()
                        $xmlWriter.WriteEndElement()
                    $xmlWriter.WriteEndElement()
                $xmlWriter.WriteEndElement()
            $xmlWriter.WriteEndElement()
            $xmlWriter.WriteEndDocument()
            $xmlWriter.Flush()
            $xmlWriter.Close()
          }
        }

        function Write-Info {
            process {
                $xmlSettings = New-Object System.Xml.XmlWriterSettings
                $xmlSettings.Indent = $true
                $xmlSettings.IndentChars = "    "
                
                $xmlWriter = [System.XML.XmlWriter]::Create($MOD_INFO_PATH, $xmlSettings)
                $xmlWriter.WriteStartDocument()
                    $xmlWriter.WriteStartElement("fomod")
                        $xmlWriter.WriteElementString("Name", $MOD_NAME)
                        $xmlWriter.WriteElementString("Author", $MOD_AUTHOR)
                        $xmlWriter.WriteElementString("Version", $MOD_VERSION)
                        if (![string]::IsNullOrEmpty($MOD_NEXUS_ID)) {
                          $xmlWriter.WriteElementString("Website", $MOD_NEXUS_URL)
                        }
                        
                    $xmlWriter.WriteEndElement()
                $xmlWriter.WriteEndDocument()
                $xmlWriter.Flush()
                $xmlWriter.Close()
            }
        }

        If ($($Variants | Where-Object {$_.IsDetected}).Count -eq 0) {
            echo "No available variants"
            return
        }

        # Finally we can create the installer
        New-Item $FOMOD_DIR -ItemType Directory -Force
        echo "Creating FOMOD: ✅"
        echo "Name: $MOD_NAME"
        echo "Version: $MOD_VERSION"
        echo "Author: $MOD_AUTHOR"
        if (![string]::IsNullOrEmpty($MOD_NEXUS_ID)) {
          echo "Nexus: $MOD_NEXUS_URL"
        }

        Foreach ($Variant in $Variants) {
            If ($Variant.IsDetected) {
                New-Item "$INSTALLER_DIR/$($Variant.Path)" -ItemType Directory -Force
                
                echo "Adding $($Variant.GameVersion) Variant plugin: ✅"
                echo "Name: $($Variant.Name)"
                echo "Description: $($Variant.Description)"
                echo "Path: $($Variant.Path)"
                
                If (![string]::IsNullOrEmpty($Variant.ImageDst) -and ![string]::IsNullOrEmpty($Variant.ImageSrc) -and (Test-Path "$($Variant.ImageSrc)")) {
                    New-Item "$IMAGES_DIR" -ItemType Directory -Force
                    echo "Image: $($Variant.ImageDst)"
                    echo "Image Source: $($Variant.ImageSrc)"
                    Copy-Item -Path "$($Variant.ImageSrc)" -Destination "$INSTALLER_DIR/$($Variant.ImageDst)" -Force
                }
            } else {
                echo "Skipped $($Variant.GameVersion) Variant plugin: ⬛"
            }
        }
        
        Write-Info
        Write-Config

        echo "MOD_VERSION=$MOD_VERSION" >> $Env:GITHUB_OUTPUT
        echo "INSTALLER_NAME=$MOD_NAME FOMOD Installer" >> $Env:GITHUB_OUTPUT
        echo "INSTALLER_DIR=$INSTALLER_DIR" >> $Env:GITHUB_OUTPUT
        echo "SE_PATH=$INSTALLER_DIR/${{inputs.SE_PATH}}" >> $Env:GITHUB_OUTPUT
        echo "AE_PATH=$INSTALLER_DIR/${{inputs.AE_PATH}}" >> $Env:GITHUB_OUTPUT
        echo "AE353_PATH=$INSTALLER_DIR/${{inputs.AE353_PATH}}" >> $Env:GITHUB_OUTPUT
        echo "VR_PATH=$INSTALLER_DIR/${{inputs.VR_PATH}}" >> $Env:GITHUB_OUTPUT
        echo "Created $MOD_NAME ($MOD_VERSION) FOMOD Installer ✅"
        echo "Location: $INSTALLER_DIR"

    - uses: actions/download-artifact@v3
      with:
        path: ${{env.ARTIFACTS_DIR}}

    - name: Pack Required Files
      if: steps.req-install.outputs.HAS_REQUIRED_INSTALL == 'true'
      shell: pwsh
      run: |
        $REQUIRED_DIR = "$PWD/${{ inputs.REQUIRED_INSTALLATION_DIR }}"
        $REQUIRED_SRC = "${{ env.INSTALLER_DIR }}/${{ inputs.REQUIRED_SRC_PATH }}"

        New-Item $REQUIRED_SRC -ItemType Directory -Force
        dir "$REQUIRED_DIR/*" | mv -dest "$REQUIRED_SRC"

    - name: Pack SE dll
      if: (inputs.SE_ARTIFACT != '') && (steps.fomod.outputs.SE_PATH != '')
      shell: pwsh
      run: |
        $ARTIFACTS_DIR = "${{env.ARTIFACTS_DIR}}/${{inputs.SE_ARTIFACT}}"
        $DST = "${{ steps.fomod.outputs.SE_PATH }}"
        Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.dll | Move-Item -Destination $DST
        If ('${{inputs.INCLUDE_PDB}}' -eq 'true') {
            echo "Including PDB file for SE ✅"
            Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.pdb | Move-Item -Destination $DST
        }

    - name: Pack AE dll
      shell: pwsh
      if: (inputs.AE_ARTIFACT != '') && (steps.fomod.outputs.AE_PATH != '')
      run: |
        $ARTIFACTS_DIR = "${{env.ARTIFACTS_DIR}}/${{inputs.AE_ARTIFACT}}"
        $DST = "${{ steps.fomod.outputs.AE_PATH }}"
        Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.dll | Move-Item -Destination $DST
        If ('${{inputs.INCLUDE_PDB}}' -eq 'true') {
            echo "Including PDB file for AE ✅"
            Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.pdb | Move-Item -Destination $DST
        }
    
    - name: Pack AE353 dll
      if: (inputs.AE353_ARTIFACT != '') && (steps.fomod.outputs.AE353_PATH != '')
      shell: pwsh
      run: |
        $ARTIFACTS_DIR = "${{env.ARTIFACTS_DIR}}/${{inputs.AE353_ARTIFACT}}"
        $DST = "${{ steps.fomod.outputs.AE353_PATH }}"
        Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.dll | Move-Item -Destination $DST
        If ('${{inputs.INCLUDE_PDB}}' -eq 'true') {
            echo "Including PDB file for AE353 ✅"
            Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.pdb | Move-Item -Destination $DST
        }
    
    - name: Pack VR dll
      if: (inputs.VR_ARTIFACT != '') && (steps.fomod.outputs.VR_PATH != '')
      shell: pwsh
      run: |
        $ARTIFACTS_DIR = "${{env.ARTIFACTS_DIR}}/${{inputs.VR_ARTIFACT}}"
        $DST = "${{ steps.fomod.outputs.VR_PATH }}"
        Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.dll | Move-Item -Destination $DST
        If ('${{inputs.INCLUDE_PDB}}' -eq 'true') {
            echo "Including PDB file for VR ✅"
            Get-ChildItem -Path $ARTIFACTS_DIR -Filter *.pdb | Move-Item -Destination $DST
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: ${{ steps.fomod.outputs.INSTALLER_NAME }}
        if-no-files-found: error
        path: ${{ steps.fomod.outputs.INSTALLER_DIR }}
      